// -----------------------------------------------------------------------------
// Pickup helper classes for 'grabbing'.
// -----------------------------------------------------------------------------

//Usable pickup archetype. 
class HDPickup:CustomInventory
{
	// originally in statusbar.zs
	mixin HDInventoryBlackoutWrapper;
	
	int HDPickupFlags;
	flagdef DropTranslation:HDPickupFlags,0;          // set translation to player's color when dropped.
	flagdef FitsInBackpack:HDPickupFlags,1;           // whether or not this item fits in a backpack.
	flagdef MultiPickup:HDPickupFlags,2;              // lets you continue picking up without re-pressing the key
	flagdef IsBeingPickedUp:HDPickupFlags,3;          // whether or not this item is being picked up.
	flagdef CheatNoGive:HDPickupFlags,4;              // whether or not this is a CHEAT item.
	flagdef MustShowInMagManager:HDPickupFlags,5;     // whether or not this item shows up in the mag manager.
	flagdef NotInPockets:HDPickupFlags,6;             // whether or not an item is in the player's 'pockets' inventory.
	flagdef NeverShowInPickupManager:HDPickupFlags,7; // whether or not to show this item in the pickup manager.
	flagdef FullCoverage:HDPickupFlags,8;             // toggles full coverage for wearables.
	flagdef BodyCoverage:HDPickupFlags,9;             // toggles body coverage for wearables.
	flagdef FaceCoverage:HDPickupFlags,10;            // toggles face coverage for wearables.
	flagdef NoRandomBackpackSpawn:HDPickupFlags,11;   // whether or not this item can appear in a backpack.

	// The person picking the pickup up. 
	actor picktarget;
	
	// The bulk of this inventory item.
	double bulk;
	property bulk:bulk;
	
	// The max amount of this item the player can carry.
	int maxunitamount;
	property maxunitamount:maxunitamount;
	
	// unique 3 character refid for loadout codes. 
	// converted to lowercase, shouldn't be capital. 
	string refid;
	property refid:refid;
	
	// the layer this inventory item is worn at (for wearables). 
	int wornlayer;
	property wornlayer:wornlayer;
	
	// the priority of this item in a given worn layer. 
	int overlaypriority;
	property overlaypriority:overlaypriority;
	
	default
	{
		// Default inventory flags (undoes vanilla behaviors).
		+solid
		+inventory.invbar
		+inventory.persistentpower
		+noblockmonst
		+notrigger
		+dontgib
		inventory.interhubamount int.MAX;
		inventory.maxamount 1000;
		gravity HDCONST_GRAVITY;
		
		// Default item size. 
		radius 8; height 10; scale 0.8;

		// pickup default flags.
		+hdpickup.droptranslation
		-hdpickup.multipickup
		+hdpickup.fitsinbackpack
		-hdpickup.cheatnogive
		-hdpickup.isbeingpickedup
		+hdpickup.bodycoverage
		hdpickup.bulk 0;
		hdpickup.refid "";
		inventory.pickupsound "weapons/pocket";
		hdpickup.maxunitamount 1;

		hdpickup.wornlayer 0;  //for playsim
		hdpickup.overlaypriority 0;  //for hud
	}
	
	// Only the pickerupper class can collide with pickups. 
	override bool cancollidewith(actor other,bool passive)
	{
		return HDPickerUpper(other);
	}

	//called on level resets, etc.
	virtual void Consolidate(){}

	//when a grabber touches it but before the pull
	virtual bool OnGrab(actor grabber){return true;}

	//when the item has been taken in but just before inventory capacity is checked
	virtual bool BeforePockets(actor other){return false;}

	//called to get the bulk of an item.
	virtual double getbulk()
	{
		return amount*bulk;
	}
	
	// override to set drop-translation,
	// used for backpacks. 
	override inventory createtossable(int amt)
	{
		let onr=owner;
		inventory iii=super.createtossable(amt);
		if(bdroptranslation&&onr)
		{
			if(iii)
				iii.translation=onr.translation;
		}
		return iii;
	}
	
	// Caps the player's max speed. Used for wearables.
	virtual double RestrictSpeed(double speedcap){return speedcap;}


	// Inventory space calculation functions.
	// Really should be in a class like hdmath, since they only need an
	// inventory item and the player. 
	static double MaxPocketSpace(actor caller)
	{
		let hdp=hdplayerpawn(caller);
		if(hdp)return hdp.maxpocketspace;
		return HDCONST_MAXPOCKETSPACE;
	}
	
	// Pocket space calculation. 
	// iterates over the entire inventory of the caller. 
	static double PocketSpaceTaken(actor caller)
	{
		double pocketenc=0;
		for(inventory hdww=caller.inv;hdww!=null;hdww=hdww.inv)
		{
			let hdp=hdpickup(hdww);
			if(hdp&&!hdp.bnotinpockets)
				pocketenc+=abs(hdp.getbulk());
		}
		return pocketenc*hdmath.getencumbrancemult();
	}
	
	// Determines if you can pick something up. Your 'max give'.
	static int MaxGive(actor caller,class<inventory> type,double unitbulk)
	{
		// Calculates the absolute max and unit bulk.
		unitbulk*=hdmath.getencumbrancemult();
		int absmax=getdefaultbytype(type).maxamount-caller.countinv(type);
		
		// Returns maximum possible amount if on no encumberance mode.
		if(unitbulk<=0)
			return absmax;
		
		// The space that would be left after you pick something up.
		double spaceleft=HDPickup.MaxPocketSpace(caller)-HDPickup.PocketSpaceTaken(caller);
		
		// the maximum amount you can pick up with your current space left.
		int mg=int(clamp(absmax,0,spaceleft/unitbulk));
		
		// returns an mg of 1 if the player can't pick something up. 
		if(
			mg<1
			&&absmax>0
			&&(class<hdpickup>)(type)
			&&getdefaultbytype((class<hdpickup>)(type)).bnotinpockets
			&&(
				!hdplayerpawn(caller)
				||hdplayerpawn(caller).overloaded<30.
			)
		)mg=1;
		
		// returns mg.
		return mg;
	}

	// Per-tick cleanup stuff. 
	override void doeffect()
	{
		// Die if you have no amount to give.
		if(amount<1)
			destroy();
			
		// Only occasionally ran excess item destroyer.
		// Presumably staggered to reduce performance loss. 
		else if(hdplayerpawn(owner)&&(!(level.time&(1|2|4|8|16|32|64))||level.time==1)
		)
		{
			//remove excess items in reduced-encumbrance play
			double encumb=HDMath.GetEncumbranceMult();
			if(encumb<1)
			{
				double gb=getbulk();
				if(gb)
				{
					bool givemessage=false;
					int ema=int(max(1,max(70,HDCONST_MAXPOCKETSPACE*encumb)*amount*2/gb));
					int todrop=amount-ema;
					if(todrop>0){
						if(amount>(maxamount>>1)){
							amount=ema;
							if(hdmagammo(self))hdmagammo(self).mags.resize(ema);
							givemessage=true;
						}else{
							owner.A_DropInventory(getclass(),min(10,todrop));
							givemessage=level.time<=128;
						}
					}
					// Tells you the maximums for items if you have just started a level.
					if(givemessage)owner.A_Log(string.format("Low-encumbrance maximum for %s is %i.",gettag(),ema),true);
				}
			}
		}
	}


	// mostly just used for the liteamp
	// asserts that the playerid is that of the clientside player (varies for multiplayer).
	bool IsConsolePlayer()
	{
		return
			owner
			&&owner.player
			&&owner.player.mo
			&&owner.player==players[consoleplayer]
		;
	}
	// shader sets for various shader slots. 
	void SetShader(string shaderName,bool enabled){
		if(IsConsolePlayer())PPShader.SetEnabled(shaderName,enabled);
	}
	void SetShaderU1f(string shaderName,string uniformName,float value){
		if(IsConsolePlayer())PPShader.SetUniform1f(shaderName,uniformName,value);
	}
	void SetShaderU2f(string shaderName,string uniformName,vector2 value){
		if(IsConsolePlayer())PPShader.SetUniform2f(shaderName,uniformName,value);
	}
	void SetShaderU3f(string shaderName,string uniformName,vector3 value){
		if(IsConsolePlayer())PPShader.SetUniform3f(shaderName,uniformName,value);
	}
	void SetShaderU1i(string shaderName,string uniformName,int value){
		if(IsConsolePlayer())PPShader.SetUniform1i(shaderName,uniformName,value);
	}


	// GUI namespace functions,
	// most of these are intended to be overwritten. 
	virtual ui int getsbarnum(int flags=0){return -1000000;}
	virtual ui int DisplayAmount(){return amount;}
	virtual ui void DisplayOverlay(hdstatusbar sb,hdplayerpawn hpl){}
	virtual ui void DrawHudStuff(
		hdstatusbar sb,
		hdplayerpawn hpl,
		int hdflags,
		int gzflags
	){}
	
	// No giving when touching (default behavior). Only when grabbing. 
	override void touch(actor toucher){}
	
	
	// Actually picks up an item. Calls touch/inventorygive/etc.
	virtual void actualpickup(actor other,bool silent=false)
	{
		// Tries to set other if this function is called with a nullpointer.
		if(!other)
			other=picktarget;
		if(!other)
			return;
		
		// If an item is too hot, you cannot pick it up.
		if(heat.getamount(self)>50)return;
		
		// Invokes .touch if the flag alwayspickup is set.
		if(balwayspickup)
		{
			inventory.touch(other);
			return;
		}
		
		// Calculates the maxtake # for this item.
		name gcn=getclassname();
		int maxtake=min(amount,HDPickup.MaxGive(other,gcn,getbulk()));
		
		// Don't pick something up if you cannot hold another.
		if(maxtake<1)
			return;
		
		// Notifies the player if the silent flag is unset. 
		if(!silent)
		{
			other.A_StartSound(pickupsound,CHAN_AUTO);
			HDPickup.LogPickupMessage(other,pickupmessage());
		}
		
		// Logic for handling partial pickups. 
		bool gotpickedup=false;
		if(maxtake<amount)
		{
			HDF.Give(other,gcn,maxtake);
			amount-=maxtake;
			SplitPickup();
		}
		// Take and destroy if the criteria above weren't triggered. 
		else
		{
			// For wearables.
			if(!other.findinventory(getclass()))
				attachtoowner(other);
			// For everything else. 
			else
			{
				HDF.Give(other,gcn,maxtake);
				destroy();
			}
		}
	}


	// Allows pickup messages to use custom colour (as a treat).
	static void LogPickupMessage(
		actor caller,
		string pickupmessage,
		name msgcolour="msg0color"
	){
		if(pickupmessage=="")return;
		caller.A_Log(string.format("%s%s",
			HDMath.MessageColour(caller,msgcolour),
			pickupmessage
		),true);
	}

	// Wearable behavior overrides.
	// The layer numbering system is pretty limiting, 
	// it'd be worth replacing this with a slot and stack system instead.
	//
	// If two wearable classes have the same layer number, they should be
	// considered to be occupying the same place and unable to be combined.
	// If you've set up the CheckStrip() checks properly,
	// this check should never come up as true.
	bool CheckConflictingWornLayer(actor other,bool bugreport=false){
		if(!wornlayer||!other)return false;
		for(inventory iii=other.inv;iii!=null;iii=iii.inv){
			let hdp=hdpickup(iii);
			if(
				hdp
				&&hdp!=self
				&&hdp.wornlayer==wornlayer
			){
				if(bugreport)console.printf("\cgERROR: "..gettag().." wornlayer property conflicts with "..hdp.gettag()..". Please report this bug to the modder responsible.");
				return true;
			}
		}return false;
	}

	// Wearable's attach code. 
	// Takes one item, gives another.
	// Probably should involve a slot that takes a pointer to the invitem, 
	// assuming a stack of invitems can retain their unique information. 
	override void AttachToOwner(actor other){
		super.AttachToOwner(other);

		//in case it's added in a loadout
		if(CheckConflictingWornLayer(owner,true)){
			amount=0;
			return;
		}

		if(overlaypriority){
			let hpl=HDPlayerPawn(owner);
			if(
				hpl
				&&hpl==other
			)hpl.GetOverlayGivers(hpl.OverlayGivers);
		}
	}

	
	// State Label Wrapper. 
	void GotoSpawn(){
		if(findstate("spawn2")){
			if(hd_debug)A_Log(string.format("%s still uses spawn2",getclassname()));
			setstatelabel("spawn2");
		}
	}

	// Pickup split; breaks multipickups automatically. 
	virtual void SplitPickup()
	{
		int maxpkamt=max(1,maxunitamount);
		while(amount>maxpkamt)
		{
			let aaa=hdpickup(spawn(getclassname(),pos,ALLOW_REPLACE));
			aaa.amount=maxpkamt;amount-=maxpkamt;
			aaa.vel=vel+(frandom(-0.6,0.6),frandom(-0.6,0.6),frandom(-0.6,0.6));
			if(bdroptranslation)aaa.translation=translation;
		}
		GotoSpawn();
	}
	
	// Post init code. 
	override void postbeginplay()
	{
		// Flags for destroying certain items with deathmatch flags. 
		// Mostly just armor and health, for now.
		if(
			deathmatch  //sv_noarmor/health normally does nothing outside dm
			&&(
				(sv_noarmor&&bisarmor)
				||(sv_nohealth&&bishealth)
			)
		){
			destroy();
			return;
		}
	
		// Populate the itemsthatusethis list. 
		itemsthatusethis.clear();
		GetItemsThatUseThis();
		
		// Call super.
		super.postbeginplay();

		// split and blacklist, if needed.
		if(hdpickup.checkblacklist(self,refid))return;
		let hdps=new("HDPickupSplitter");
		hdps.invoker=self;
	}

	//parse what would normally be the amount string as a set of variables
	virtual void loadoutconfigure(string input){}

	//This is an array of item names created on an actor's initialization.
	//If you have a sub-mod item that also uses a given ammo type,
	//you can use an event handler to add that item to this array for that ammo type.
	//The IsUsed function can, of course, take in any other circumstances you can write in.
	array<string> itemsthatusethis;
	virtual void GetItemsThatUseThis(){}
	virtual bool IsUsed(){return true;}

	//destroy caller if a refid is mentioned in hd_blacklist
	static bool checkblacklist(actor caller,string refid,bool force=false){
		if(refid=="")return false;
		string bl=hd_blacklist;
		bl=bl.makelower();
		if(!force&&bl.left(3)!="all")return false;
		bl.replace(" ","");
		int bldex=bl.rightindexof(refid.makelower());
		// this must use RightIndexOf not IndexOf!
		// consider: "bfg=zrk,zrk=fis" - zerk replaced with none added
		// versus "bfg=zrk,zrk=fis,hrp=zrk" - zerk replaced, then added elsewhere
		// only if the FINAL instance of the refid does not follow "=" that it is truly blacklisted.
		if(bldex>=0){
			string prevchar=bl.mid(bldex-1,1);
			if(prevchar!="="){
				caller.destroy();
				return true;
			}
		}
		return false;
	}


	//like A_DropItem but you can set the amount
	static inventory DropItem
	(
		actor caller,
		class<inventory> itemtype,
		int amt,
		bool pickup=false
	){
		// Inventory ptr of the item to be spawned.
		let mmm=inventory
		(
			caller.spawn
			(
				itemtype, // type
				(caller.pos.xy,caller.pos.z+max(0,caller.height-12)), // pos
				ALLOW_REPLACE // flags
			)
		);
		// copies various properties that cannot be set by .spawn()
		mmm.angle=caller.angle;
		mmm.A_ChangeVelocity(2,0,-1,CVF_RELATIVE);
		mmm.vel+=caller.vel;
		// Add the amount argumenet.
		let mmmm=HDMagAmmo(mmm);
		if(mmmm)
		{
			mmmm.amount=0;
			mmmm.mags.clear();
			mmmm.AddAMag(amt);
		}
		else mmm.amount=amt;
		if(pickup)
		{
			let ppp=HDPickup(mmm);
			if(ppp)ppp.actualpickup(caller);
			else ppp.touch(caller);
		}
		return mmm;
	}

	
	static void SetDropVel(actor dropper,actor caller){
		caller.setz(dropper.pos.z+dropper.height*0.8);
		double dp=max(dropper.pitch-6,-90);
		caller.vel=dropper.vel+(
			cos(dp)*(cos(dropper.angle),sin(dropper.angle)),
			-sin(dp)
		)*3;
	}
	override void OnDrop(actor dropper){
		super.OnDrop(dropper);
		if(dropper)SetDropVel(dropper,self);
		HDBackpack.ForceUpdate(dropper);
	}

	states{
	use:
		TNT1 A 0;
		fail;
	spawn:
		CLIP A -1;
		stop;
	}
}

// Thinker for splitting.
class HDPickupSplitter:Thinker{
	hdpickup invoker;
	override void Tick(){
		super.tick();
		if(!!invoker&&!invoker.owner){
			invoker.SplitPickup();
		}
		destroy();
	}
}


// Thinker for grabbing.
class GrabThinker:Thinker
{
	actor picktarget;
	actor pickobj;
	int ticker;
	bool oldsolid;
	static void Grab(actor grabber,actor grabee,int delay=0){
		let hdp=hdpickup(grabee);
		if(hdp){
			if(hdp.bisbeingpickedup)return;
			hdp.bisbeingpickedup=true;
		}

		let grabthink=new("GrabThinker");
		if(delay)grabthink.ticker=-abs(delay);
		grabthink.picktarget=grabber;
		if(grabee){
			grabthink.pickobj=grabee;
			grabthink.oldsolid=grabee.bsolid;
		}
	}
	override void ondestroy(){
		if(pickobj)pickobj.bsolid=oldsolid;
	}
	override void tick(){
		if(!picktarget||!picktarget.player||!pickobj){destroy();return;}
		super.tick();
		ticker++;
		if(ticker<0){
			return;
		}else if(ticker<4){
			pickobj.setorigin(
				0.5*(
					(picktarget.pos.xy,picktarget.pos.z+picktarget.height*0.8)
					+pickobj.pos
				),true
			);
			pickobj.bsolid=false;
		}else{
			let pt=hdpickup(pickobj);if(pt)pt.bisbeingpickedup=false;
			let mt=hdmagammo(pickobj);
			let wt=hdweapon(pickobj);
			let ht=hdupk(pickobj);
			let tt=inventory(pickobj);
			if(
				!pickobj
				||!picktarget
				||picktarget.health<1
			){
				destroy();
				return;
			}

			vector2 shiftpk=actor.rotatevector((frandom(-0.4,-0.8),frandom(0.8,1.1)),picktarget.angle);
			pickobj.vel.xy+=shiftpk;
			pickobj.setorigin((pickobj.pos.xy+shiftpk,pickobj.pos.z),true);

			if(ht){
				ht.picktarget=picktarget;
				ht.a_hdupkgive();
				destroy();
				return;
			}

			if(
				pt
				&&(
					pt.BeforePockets(picktarget)
					||pt.CheckConflictingWornLayer(picktarget)
				)
			){
				destroy();
				return;
			}


			//if backpack is out, try to move into backpack
			if(picktarget.player.readyweapon is "HDBackpack"){
				let bp=HDBackpack(picktarget.player.readyweapon);
				if(
					bp
					&&(
						bp.CanGrabInsert(tt,tt.GetClass(),picktarget)
						&&bp.Storage.TryInsertItem(tt,picktarget,tt.Amount,flags:BF_SELECT)==tt.Amount
						||!pickobj //if totally picked up, don't do the rest of the checks
					)
				){
					destroy();
					return;
				}
			}

			//check for pocket space
			let hdpt=hdplayerpawn(picktarget);
			bool maglimited=
				hdpt
				&&mt
				&&hdpt.hd_maglimit.getint()>0
				&&hdpt.countinv(mt.getclassname())>=hdpt.hd_maglimit.getint()
			;
			bool holdingfiremode=
				picktarget.player
				&&picktarget.player.cmd.buttons&BT_FIREMODE
			;
			if(
				(
					!tt
					||!tt.balwayspickup
				)&&(
					(
						pt
						&&HDPickup.MaxGive(picktarget,pt.getclass(),
							mt?mt.getbulk():pt.bulk
						)<1
					)||(
						ht
						&&ht.pickuptype!="none"
						&&HDPickup.MaxGive(picktarget,pt.getclass(),
							getdefaultbytype(ht.pickuptype).bulk
						)<1
					)||(
						mt
						&&(
							holdingfiremode
							||maglimited
						)
					)
				)
			){
				//make one last check for mag switch before aborting
				//do a single 1:1 switch with the lowest mag
				if(mt){
					name gcn=mt.getclassname();
					let alreadygot=HDMagAmmo(picktarget.findinventory(gcn));
					if(alreadygot){
						alreadygot.syncamount();
						int thismag=mt.mags[0];
						bool thisisbetter=false;
						for(int i=0;!thisisbetter&&i<alreadygot.amount;i++){
							if(thismag>alreadygot.mags[i])thisisbetter=true;
						}
						if(thisisbetter){
							alreadygot.LowestToLast();
							if(hd_debug)alreadygot.logamounts();
							picktarget.A_DropInventory(gcn,1);
							if(HDWeapon.CheckDoHelpText(picktarget))picktarget.A_Log("Discarding inferior mag to make room.",true);
							mt.actualpickup(picktarget);
							destroy();
							return;
						}else{
							if(HDWeapon.CheckDoHelpText(picktarget)){
								if(maglimited){
									picktarget.A_Log("hd_maglimit "..hdpt.hd_maglimit.getint().." exceeded.",true);
								}else if(holdingfiremode){
									picktarget.A_Log("Firemode held but target mag not better. Swap aborted.",true);
								}
							}
							destroy();
							return;
						}
					}
				}

				if(HDWeapon.CheckDoHelpText(picktarget)){
					picktarget.A_Log("No room in pockets.",true);
					if(hdpt)hdpt.hasgrabbed=true;
				}
				destroy();
				return;
			}

			//handle actual pickups
			if(pt){
				pt.actualpickup(picktarget);
			}else if(wt){
				wt.actualpickup(picktarget);
			}else if(tt){
				if(picktarget.vel==(0,0,0))picktarget.A_ChangeVelocity(0.001,0,0,CVF_RELATIVE);
			}
			destroy();
			return;
		}
	}
}

// Item only hitbox used by the player's grab logic.
class HDPickerUpper:Actor
{
	default
	{
		+solid
		+nogravity
		+noblockmap
		+noblockmonst
		height 1;
		radius 2;
	}
	// Filters down to inventory classes. 
	override bool cancollidewith(actor other,bool passive)
	{
		return inventory(other)||hdupk(other);
	}
}